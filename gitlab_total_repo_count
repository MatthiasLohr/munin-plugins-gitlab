#!/usr/bin/env python

from lib import get_gitlab_instance
import os
import sys
import glob

gitlab = get_gitlab_instance()
repository_root = gitlab.get_repository_dir()
if len(sys.argv) >= 2 and sys.argv[1] == 'config':
    print('graph_title GitLab Repository Count')
    print('graph_vlabel Repository Count')
    print('graph_args -l 0')
    print('graph_category gitlab')
    print('repo_count.label Repository Count')
    print('repo_count.draw AREA')
    print('wiki_count.label Wiki Count')
    print('wiki_count.draw STACK')
    print('wiki_empty_count.label Empty Wiki Count')
    print('wiki_empty_count.draw STACK')
    sys.exit(0)

repo_count = 0
wiki_count = 0
wiki_empty_count = 0

try:
    namespaces = os.listdir(repository_root)
    if '@hashed' in namespaces:
	repository_root = os.path.join(repository_root, '@hashed')
        namespaces = os.listdir(repository_root)
    for namespace in namespaces:
        subdir = os.path.join(repository_root, namespace)
        if os.path.isfile(subdir):
            continue
        repos = glob.glob(os.path.join(subdir, '*', '*.git'))
	if not repos:
            repos = os.listdir(subdir)
        for repo in repos:
            if repo.endswith('.wiki.git'):
                try:
                    if os.listdir(subdir + os.sep + repo + '/objects/pack'):
                        wiki_count += 1
                    else:
                        wiki_empty_count += 1
                except OSError:
                    wiki_empty_count += 1
            elif repo.endswith('.git'):
                repo_count += 1
except OSError as e:
    print(e)
    sys.exit(1)

print('repo_count.value ' + str(repo_count))
print('wiki_count.value ' + str(wiki_count))
print('wiki_empty_count.value ' + str(wiki_empty_count))
