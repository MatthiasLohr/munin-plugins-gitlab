#!/usr/bin/env python

from lib import get_gitlab_instance, munin_safe_id
import sys

SHOW_CONFIG = len(sys.argv) >= 2 and sys.argv[1] == 'config'

gitlab = get_gitlab_instance()
db = gitlab.get_db_connection()

if SHOW_CONFIG:
    print('graph_title GitLab remote mirror status')
    print('graph_vlabel # of mirrors')
    print('graph_args -l 0')
    print('graph_category gitlab')

cursor = db.cursor()
cursor.execute("SELECT n.path, p.path, rm.update_status, COUNT(rm.id) FILTER( WHERE rm.id != 0) FROM "
               "("
               # All current status lines for mirrors
               "    SELECT rm_expected.update_status, rm_expected.project_id,rm_expected.id FROM remote_mirrors rm_expected"
               "    UNION ALL"
               # All known missing status codes for projects that have mirrors
               "    SELECT s.status as update_status, p.id as project_id, 0 as id FROM"
               "        (VALUES ('finished'), ('to_retry'), ('failed')) AS s(status), projects p"
               "    WHERE"
               #          All projects that have mirrors 
               "          EXISTS (SELECT FROM remote_mirrors rm_exist WHERE rm_exist.project_id = p.id) "
               #          And don't have a mirror in this status
               "          AND NOT EXISTS (SELECT FROM remote_mirrors rm_exist_status WHERE rm_exist_status.project_id = p.id AND rm_exist_status.update_status = s.status)"
               ") AS rm, projects p, namespaces n "
               "WHERE p.id = rm.project_id AND n.id = p.namespace_id "
               "GROUP BY n.path, p.path, rm.update_status "
               "ORDER BY n.path, p.path, rm.update_status ASC")


def print_row(row):
    group = munin_safe_id(row[0])
    project = munin_safe_id(row[1])
    update_status = munin_safe_id(row[2])
    count = row[3]
    if SHOW_CONFIG:
        print('{0}_{1}_{2}.label {3}/{4} {5}'.format(group, project, update_status, row[0], row[1], row[2]))
        if update_status in ['to_retry', 'failed']:
            print('{0}_{1}_{2}.warning 0:0'.format(group, project, update_status))
            print('{0}_{1}_{2}.draw LINESTACK1'.format(group, project, update_status))
        elif update_status in ['finished']:
            print('{0}_{1}_{2}.draw LINESTACK1'.format(group, project, update_status))
            pass
    else:
        print('{0}_{1}_{2}.value {3:d}'.format(group, project, update_status, count))


for row in cursor.fetchall():
    print_row(row)


cursor.close()
db.close()
